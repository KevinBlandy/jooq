/*
 * This file is generated by jOOQ.
 */
package io.springboot.jooq.generated.tables.daos;


import io.springboot.jooq.generated.tables.UserRole;
import io.springboot.jooq.generated.tables.records.UserRoleRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UInteger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * 用户角色关联
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserRoleDao extends DAOImpl<UserRoleRecord, io.springboot.jooq.generated.tables.pojos.UserRole, Record2<UInteger, UInteger>> {

    /**
     * Create a new UserRoleDao without any configuration
     */
    public UserRoleDao() {
        super(UserRole.USER_ROLE, io.springboot.jooq.generated.tables.pojos.UserRole.class);
    }

    /**
     * Create a new UserRoleDao with an attached configuration
     */
    @Autowired
    public UserRoleDao(Configuration configuration) {
        super(UserRole.USER_ROLE, io.springboot.jooq.generated.tables.pojos.UserRole.class, configuration);
    }

    @Override
    public Record2<UInteger, UInteger> getId(io.springboot.jooq.generated.tables.pojos.UserRole object) {
        return compositeKeyRecord(object.getRoleId(), object.getUserId());
    }

    /**
     * Fetch records that have <code>role_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.UserRole> fetchRangeOfRoleId(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.ROLE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>role_id IN (values)</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.UserRole> fetchByRoleId(UInteger... values) {
        return fetch(UserRole.USER_ROLE.ROLE_ID, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.UserRole> fetchRangeOfUserId(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.UserRole> fetchByUserId(UInteger... values) {
        return fetch(UserRole.USER_ROLE.USER_ID, values);
    }

    /**
     * Fetch records that have <code>created_date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.UserRole> fetchRangeOfCreatedDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.CREATED_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_date IN (values)</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.UserRole> fetchByCreatedDate(LocalDateTime... values) {
        return fetch(UserRole.USER_ROLE.CREATED_DATE, values);
    }
}
