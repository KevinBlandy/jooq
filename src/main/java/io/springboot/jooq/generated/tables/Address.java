/*
 * This file is generated by jOOQ.
 */
package io.springboot.jooq.generated.tables;


import io.springboot.jooq.generated.Indexes;
import io.springboot.jooq.generated.Jooq;
import io.springboot.jooq.generated.Keys;
import io.springboot.jooq.generated.tables.records.AddressRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 地址
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Address extends TableImpl<AddressRecord> {

    private static final long serialVersionUID = 1738406704;

    /**
     * The reference instance of <code>jooq.address</code>
     */
    public static final Address ADDRESS = new Address();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressRecord> getRecordType() {
        return AddressRecord.class;
    }

    /**
     * The column <code>jooq.address.id</code>. 地址id
     */
    public final TableField<AddressRecord, UInteger> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "地址id");

    /**
     * The column <code>jooq.address.created_date</code>. 创建时间
     */
    public final TableField<AddressRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>jooq.address.name</code>. 详细地址
     */
    public final TableField<AddressRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "详细地址");

    /**
     * The column <code>jooq.address.user_id</code>. 用户id
     */
    public final TableField<AddressRecord, UInteger> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "用户id");

    /**
     * Create a <code>jooq.address</code> table reference
     */
    public Address() {
        this(DSL.name("address"), null);
    }

    /**
     * Create an aliased <code>jooq.address</code> table reference
     */
    public Address(String alias) {
        this(DSL.name(alias), ADDRESS);
    }

    /**
     * Create an aliased <code>jooq.address</code> table reference
     */
    public Address(Name alias) {
        this(alias, ADDRESS);
    }

    private Address(Name alias, Table<AddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private Address(Name alias, Table<AddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("地址"), TableOptions.table());
    }

    public <O extends Record> Address(Table<O> child, ForeignKey<O, AddressRecord> key) {
        super(child, key, ADDRESS);
    }

    @Override
    public Schema getSchema() {
        return Jooq.JOOQ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADDRESS_IDX7ROD8A71YEP5VXASB0MS3OSBG);
    }

    @Override
    public Identity<AddressRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_ADDRESS;
    }

    @Override
    public UniqueKey<AddressRecord> getPrimaryKey() {
        return Keys.KEY_ADDRESS_PRIMARY;
    }

    @Override
    public List<UniqueKey<AddressRecord>> getKeys() {
        return Arrays.<UniqueKey<AddressRecord>>asList(Keys.KEY_ADDRESS_PRIMARY);
    }

    @Override
    public Address as(String alias) {
        return new Address(DSL.name(alias), this);
    }

    @Override
    public Address as(Name alias) {
        return new Address(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(String name) {
        return new Address(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(Name name) {
        return new Address(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UInteger, LocalDateTime, String, UInteger> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
