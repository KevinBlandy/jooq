/*
 * This file is generated by jOOQ.
 */
package io.springboot.jooq.generated.tables.records;


import io.springboot.jooq.generated.tables.UserSeting;
import io.springboot.jooq.generated.tables.interfaces.IUserSeting;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * 用户设置关联
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserSetingRecord extends UpdatableRecordImpl<UserSetingRecord> implements Record3<UInteger, UByte, UInteger>, IUserSeting {

    private static final long serialVersionUID = -2081457485;

    /**
     * Setter for <code>jooq.user_seting.id</code>. 设置id
     */
    @Override
    public void setId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>jooq.user_seting.id</code>. 设置id
     */
    @Override
    public UInteger getId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>jooq.user_seting.notify</code>. 是否接受通知
     */
    @Override
    public void setNotify(UByte value) {
        set(1, value);
    }

    /**
     * Getter for <code>jooq.user_seting.notify</code>. 是否接受通知
     */
    @Override
    public UByte getNotify() {
        return (UByte) get(1);
    }

    /**
     * Setter for <code>jooq.user_seting.user_id</code>. 用户id
     */
    @Override
    public void setUserId(UInteger value) {
        set(2, value);
    }

    /**
     * Getter for <code>jooq.user_seting.user_id</code>. 用户id
     */
    @Override
    public UInteger getUserId() {
        return (UInteger) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UInteger, UByte, UInteger> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UInteger, UByte, UInteger> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UInteger> field1() {
        return UserSeting.USER_SETING.ID;
    }

    @Override
    public Field<UByte> field2() {
        return UserSeting.USER_SETING.NOTIFY;
    }

    @Override
    public Field<UInteger> field3() {
        return UserSeting.USER_SETING.USER_ID;
    }

    @Override
    public UInteger component1() {
        return getId();
    }

    @Override
    public UByte component2() {
        return getNotify();
    }

    @Override
    public UInteger component3() {
        return getUserId();
    }

    @Override
    public UInteger value1() {
        return getId();
    }

    @Override
    public UByte value2() {
        return getNotify();
    }

    @Override
    public UInteger value3() {
        return getUserId();
    }

    @Override
    public UserSetingRecord value1(UInteger value) {
        setId(value);
        return this;
    }

    @Override
    public UserSetingRecord value2(UByte value) {
        setNotify(value);
        return this;
    }

    @Override
    public UserSetingRecord value3(UInteger value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserSetingRecord values(UInteger value1, UByte value2, UInteger value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUserSeting from) {
        setId(from.getId());
        setNotify(from.getNotify());
        setUserId(from.getUserId());
    }

    @Override
    public <E extends IUserSeting> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserSetingRecord
     */
    public UserSetingRecord() {
        super(UserSeting.USER_SETING);
    }

    /**
     * Create a detached, initialised UserSetingRecord
     */
    public UserSetingRecord(UInteger id, UByte notify, UInteger userId) {
        super(UserSeting.USER_SETING);

        set(0, id);
        set(1, notify);
        set(2, userId);
    }
}
