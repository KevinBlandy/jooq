/*
 * This file is generated by jOOQ.
 */
package io.springboot.jooq.generated.tables.daos;


import io.springboot.jooq.generated.tables.User;
import io.springboot.jooq.generated.tables.records.UserRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * 用户
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserDao extends DAOImpl<UserRecord, io.springboot.jooq.generated.tables.pojos.User, UInteger> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(User.USER, io.springboot.jooq.generated.tables.pojos.User.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    @Autowired
    public UserDao(Configuration configuration) {
        super(User.USER, io.springboot.jooq.generated.tables.pojos.User.class, configuration);
    }

    @Override
    public UInteger getId(io.springboot.jooq.generated.tables.pojos.User object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.User> fetchRangeOfId(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(User.USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.User> fetchById(UInteger... values) {
        return fetch(User.USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.springboot.jooq.generated.tables.pojos.User fetchOneById(UInteger value) {
        return fetchOne(User.USER.ID, value);
    }

    /**
     * Fetch records that have <code>created_date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.User> fetchRangeOfCreatedDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(User.USER.CREATED_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_date IN (values)</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.User> fetchByCreatedDate(LocalDateTime... values) {
        return fetch(User.USER.CREATED_DATE, values);
    }

    /**
     * Fetch records that have <code>gender BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.User> fetchRangeOfGender(UByte lowerInclusive, UByte upperInclusive) {
        return fetchRange(User.USER.GENDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gender IN (values)</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.User> fetchByGender(UByte... values) {
        return fetch(User.USER.GENDER, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.User> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.User> fetchByName(String... values) {
        return fetch(User.USER.NAME, values);
    }

    /**
     * Fetch records that have <code>paren_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.User> fetchRangeOfParenId(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(User.USER.PAREN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>paren_id IN (values)</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.User> fetchByParenId(UInteger... values) {
        return fetch(User.USER.PAREN_ID, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.User> fetchRangeOfVersion(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(User.USER.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.User> fetchByVersion(UInteger... values) {
        return fetch(User.USER.VERSION, values);
    }
}
