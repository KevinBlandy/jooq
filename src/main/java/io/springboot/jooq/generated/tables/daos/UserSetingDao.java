/*
 * This file is generated by jOOQ.
 */
package io.springboot.jooq.generated.tables.daos;


import io.springboot.jooq.generated.tables.UserSeting;
import io.springboot.jooq.generated.tables.records.UserSetingRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * 用户设置关联
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserSetingDao extends DAOImpl<UserSetingRecord, io.springboot.jooq.generated.tables.pojos.UserSeting, UInteger> {

    /**
     * Create a new UserSetingDao without any configuration
     */
    public UserSetingDao() {
        super(UserSeting.USER_SETING, io.springboot.jooq.generated.tables.pojos.UserSeting.class);
    }

    /**
     * Create a new UserSetingDao with an attached configuration
     */
    @Autowired
    public UserSetingDao(Configuration configuration) {
        super(UserSeting.USER_SETING, io.springboot.jooq.generated.tables.pojos.UserSeting.class, configuration);
    }

    @Override
    public UInteger getId(io.springboot.jooq.generated.tables.pojos.UserSeting object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.UserSeting> fetchRangeOfId(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(UserSeting.USER_SETING.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.UserSeting> fetchById(UInteger... values) {
        return fetch(UserSeting.USER_SETING.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.springboot.jooq.generated.tables.pojos.UserSeting fetchOneById(UInteger value) {
        return fetchOne(UserSeting.USER_SETING.ID, value);
    }

    /**
     * Fetch records that have <code>notify BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.UserSeting> fetchRangeOfNotify(UByte lowerInclusive, UByte upperInclusive) {
        return fetchRange(UserSeting.USER_SETING.NOTIFY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>notify IN (values)</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.UserSeting> fetchByNotify(UByte... values) {
        return fetch(UserSeting.USER_SETING.NOTIFY, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.UserSeting> fetchRangeOfUserId(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(UserSeting.USER_SETING.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.UserSeting> fetchByUserId(UInteger... values) {
        return fetch(UserSeting.USER_SETING.USER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    public io.springboot.jooq.generated.tables.pojos.UserSeting fetchOneByUserId(UInteger value) {
        return fetchOne(UserSeting.USER_SETING.USER_ID, value);
    }
}
