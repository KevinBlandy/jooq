/*
 * This file is generated by jOOQ.
 */
package io.springboot.jooq.generated.tables.daos;


import io.springboot.jooq.generated.tables.Address;
import io.springboot.jooq.generated.tables.records.AddressRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UInteger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * 地址
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class AddressDao extends DAOImpl<AddressRecord, io.springboot.jooq.generated.tables.pojos.Address, UInteger> {

    /**
     * Create a new AddressDao without any configuration
     */
    public AddressDao() {
        super(Address.ADDRESS, io.springboot.jooq.generated.tables.pojos.Address.class);
    }

    /**
     * Create a new AddressDao with an attached configuration
     */
    @Autowired
    public AddressDao(Configuration configuration) {
        super(Address.ADDRESS, io.springboot.jooq.generated.tables.pojos.Address.class, configuration);
    }

    @Override
    public UInteger getId(io.springboot.jooq.generated.tables.pojos.Address object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.Address> fetchRangeOfId(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(Address.ADDRESS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.Address> fetchById(UInteger... values) {
        return fetch(Address.ADDRESS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.springboot.jooq.generated.tables.pojos.Address fetchOneById(UInteger value) {
        return fetchOne(Address.ADDRESS.ID, value);
    }

    /**
     * Fetch records that have <code>created_date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.Address> fetchRangeOfCreatedDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Address.ADDRESS.CREATED_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_date IN (values)</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.Address> fetchByCreatedDate(LocalDateTime... values) {
        return fetch(Address.ADDRESS.CREATED_DATE, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.Address> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.Address> fetchByName(String... values) {
        return fetch(Address.ADDRESS.NAME, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.Address> fetchRangeOfUserId(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(Address.ADDRESS.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<io.springboot.jooq.generated.tables.pojos.Address> fetchByUserId(UInteger... values) {
        return fetch(Address.ADDRESS.USER_ID, values);
    }
}
